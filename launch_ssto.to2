// Kontrol System 2 - v0.5.9.5
// https://github.com/tbma2014us/ksp2_ssto_scripts/

use { AutopilotMode, Vessel, VesselSituation, ModuleEngine } from ksp::vessel
use { CONSOLE } from ksp::console
use { current_time, sleep, yield, wait_until } from ksp::game
use { current_warp_rate, max_warp_index, set_warp_index } from ksp::game::warp
use { trigger_staging } from std::staging
use { clamp, floor, abs } from core::math
use { format } from core::str
use { estimate_burn_time, exec_next_node } from std::vac
use { circularize_orbit } from std::maneuvers
use { pid_loop} from ksp::control


sync fn timestamp() -> string = {
    let t = current_time() % 21600.0
    let hh = floor(t / 3600.0)
    let mm = floor((t % 3600.0) / 60.0)
    let ss = floor(t % 60.0)
    format("[{0,2:00}:{1,2:00}:{2,2:00}]", [hh, mm, ss])
}

sync fn log(message: string) -> Unit = {
    CONSOLE.print_line($"{timestamp()} {message}")
}

fn current_engines(vessel: Vessel) -> ksp::vessel::ModuleEngine[] = {
    let current_engines: ksp::vessel::ModuleEngine[] = []
    let engine_parts = vessel.staging.parts_in_stage(vessel.staging.current).filter(fn(e) -> e.is_engine)
    for (_part in engine_parts) {
        current_engines += _part.engine_module.value       
    }
    current_engines
}

fn ascent_actions_logic(vessel: Vessel, open_cycle_cutoff_speed: float, open_cycle: Cell<bool>) -> Unit = {
    if (vessel.altitude_scenery > 50.0) {
        if (vessel.actions.gear) {
            log("Retracting gear")
            vessel.actions.gear = false
        }
        if(vessel.static_pressure_kpa < 2.0 || vessel.horizontal_surface_speed >= open_cycle_cutoff_speed) {
            if(open_cycle.value){
                for(engine_ in current_engines(vessel)) {
                    if(engine_.engine_modes.find(fn(m) -> m.name == "Closed Cycle").defined) {
                        log("Engine in closed cycle")
                        engine_.change_mode("Closed Cycle")
                    }
                }
                open_cycle.value = false
            }
            for(intake_ in vessel.air_intakes) {
                if(intake_.toogle_intake) {
                    log("Air intake closed")
                    intake_.toogle_intake = false
                }
            }
        }
    }
    yield()
}

fn pitch_control_logic(vessel: Vessel, liftoff_speed: float, liftoff_pitch: float, subsonic_pitch: float, supersonic_pitch: float, 
open_cycle_cutoff_speed: float, closed_cycle_pitch: float) -> float = {
    if(vessel.altitude_scenery < 50.0 && vessel.horizontal_surface_speed < liftoff_speed) {
        return 0.0
    }
    if (vessel.altitude_scenery >= 50.0 && vessel.altitude_sealevel < 1000.0) {
        return liftoff_pitch
    }
    if(vessel.altitude_sealevel >= 1000.0) {
        if (vessel.horizontal_surface_speed > vessel.sound_speed) {
            if (vessel.horizontal_surface_speed > open_cycle_cutoff_speed) {
                return closed_cycle_pitch
            } else {
                return supersonic_pitch
            }
        } else {
            return subsonic_pitch
        }
    }
    liftoff_pitch
}

pub fn main_flight(vessel: Vessel, target_apoapsis: int = 100000, liftoff_speed: float = 50.0, liftoff_pitch: float = 5.0, 
subsonic_pitch: float = 5.0, supersonic_pitch: float = 15.0, open_cycle_cutoff_speed: float = 1500.0, closed_cycle_pitch: float = 15.0
) -> Result<Unit> = {
    
    if(vessel.situation != VesselSituation.Flying) {
        CONSOLE.clear()
        log("=== Start: ssto_launch ===")
        log("=== Brakes: on ===")
        vessel.actions.light = true
        vessel.actions.brakes = true
        sleep(1.0)
    } else {
        log("=== Restart: ssto_launch ===")
    }
    
    let open_cyle: Cell<bool> = Cell(
        if(current_engines(vessel).find(fn(e) -> e.current_engine_mode.name == "Air Breathing").defined) {
            true 
        } else { 
            false 
        }
    )

    vessel.autopilot.enabled = true
    vessel.autopilot.mode = AutopilotMode.Autopilot
    
    if(vessel.situation != VesselSituation.Flying) {
        sleep(1.0)
        log("Launch: Trigger initial stage")
        vessel.staging.next()
        log("=== Brakes: off ===")
        vessel.actions.brakes = false
    }

    const console_row = CONSOLE.cursor_row
    CONSOLE.move_cursor(console_row + 1, 0)

    vessel.set_throttle(1.0)

    let current_pitch: float = vessel.pitch_yaw_roll.x
    let pitchPID = pid_loop(0.1, 0.01, 0.05, -1.0, 1.0)

    while(vessel.orbit.apoapsis.value < target_apoapsis) {
        let target_pitch = pitch_control_logic(vessel, liftoff_speed, liftoff_pitch, 
        subsonic_pitch, supersonic_pitch, open_cycle_cutoff_speed, closed_cycle_pitch)
        pitchPID.setpoint = target_pitch

        let now = current_time()
        let pitch_adjustment = pitchPID.update(now, current_pitch)
        current_pitch += pitch_adjustment * 0.1

        current_pitch = clamp(current_pitch, -5.0, 25.0)
        CONSOLE.print_at(console_row, 0, $"Target pitch: {target_pitch,5:N3} Pitch: {current_pitch,5:N3} Speed: {vessel.horizontal_surface_speed,5:N1}")

        vessel.autopilot.target_orientation = vessel.heading_direction(90, current_pitch, 0).vector
        ascent_actions_logic(vessel, open_cycle_cutoff_speed, open_cyle)

        if(trigger_staging(vessel)) {
            log("Next stage triggered")
        }

        sleep(0.03)
    }
    
    vessel.set_throttle(0)
    log("Coasting to space")

    vessel.autopilot.mode = AutopilotMode.Prograde
    sleep(15)
    wait_until(fn() ->  abs(vessel.angular_velocity.x) < 0.01)

    log("Warping to orientation")
    set_warp_index(max_warp_index())
    wait_until(fn() -> vessel.altitude_sealevel > vessel.main_body.atmosphere_depth * 0.9)

    set_warp_index(0)
    wait_until(fn() -> current_warp_rate() == 1.0)
    sleep(1)

    log("=== Done: ssto_launch ===")

    const (delta_v, UT) = circularize_orbit(vessel.orbit)?
    let (burn_time, half_burn_time) = estimate_burn_time(vessel, delta_v.magnitude, 0.5, 1.0)
    vessel.maneuver.add_burn_vector(UT - half_burn_time, delta_v)?
    exec_next_node(vessel)?

    log($"Orbiting {vessel.main_body.name}")
}
